import math
import argparse
parser = argparse.ArgumentParser(description="Loan calculator")
parser.add_argument("--type", type=str, choices=['annuity', 'diff'])
parser.add_argument("--principal", type=float)
parser.add_argument('--periods', type=float)
parser.add_argument('--payment', type=float)
parser.add_argument('--interest', type=float)
args = parser.parse_args()
types = args.type
principal = args.principal
periods = args.periods
payment = args.payment
interest = args.interest
arguments = [args.type, args.principal, args.periods, args.payment, args.interest]

def principal_calc(payment, periods, interest):
    principal = payment / ((interest / 1200) * math.pow((1 + interest / 1200), periods) / (math.pow((1 + interest / 1200), periods) - 1))
    print(f'Your loan principal = {int(principal)}!')
    overpayment = payment * periods - principal
    print(f'Overpayment = {overpayment}')

    
def annuity_payment(principal, periods, interest):
    payment = int(round(principal * (interest / 1200) * math.pow((1 + interest / 1200), periods) / (math.pow((1 + interest / 1200), periods) - 1),0)) + 1
    print(f'Your monthly payment = {payment}!')
    overpayment = payment * periods - principal
    print(f'Overpayment = {overpayment}')

    
def periods_calc(principal, payment, interest):
    x = (payment / (payment - (interest / 1200) * principal ))
    period = math.log(x, (1 + interest / 1200))
    if round(period,0) % 12 == 0:
        year = int(round(period,0) // 12)
        print(f'It will take {year} year to repay this loan!')
    else:
        year = int(round(period // 12,0))
        month = int(math.ceil(period) - year * 12)
        print(f'It will take {year} years and {month} months to repay this loan!')
    overpayment = payment * math.ceil(period) - principal
    print(f'Overpayment = {overpayment}')

    
def diff_payment(principal, periods, interest):
    m = 1
    total = 0
    for _ in range(1, int(periods) + 1):
        payment = principal / periods + interest / 1200 * (principal - principal * (m - 1) / periods)
        print(f'Month {m}: payment is {math.ceil(payment)}')
        m += 1
        total += math.ceil(payment)
    overpayment = total - principal
    print(f'Overpayment = {overpayment}')
        
if types not in ['annuity', 'diff']:
    print('Incorrect parameters.')
    
elif types == 'diff' and payment is not None:
    print('Incorrect parameters.')
    
elif interest is None:
    print('Incorrect parameters.')
    
elif len(arguments) < 4:
    print('Incorrect parameters.')

            
else: 
    if types == 'annuity':
        if payment is None:
            annuity_payment(principal, periods, interest)
        elif principal is None:
            principal_calc(payment, periods, interest)
        elif periods is None:
            periods_calc(principal, payment, interest)
    elif types == 'diff':
        diff_payment(principal, periods, interest)
    
